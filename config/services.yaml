# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    google_translate.api_key: '%env(GOOGLE_TRANSLATE_API_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/**/Entity/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\LocalizationModule\Service\CachedDatabaseTranslationLoader:
        decorates: App\LocalizationModule\Service\DatabaseTranslationLoader
        arguments:
            #$innerLoader: '@.inner'
            #$cache: '@cache.translations'

    App\LocalizationModule\Service\TranslationResolverService:
        arguments:
            $translator: '@translator'
            $translationManager: '@App\LocalizationModule\Service\TranslationManager'
            $googleTranslate: '@App\LocalizationModule\Service\GoogleTranslateService'

    App\LocalizationModule\EventListener\LocaleListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 20 }

    App\MultitenancyModule\Service\TenantContext:
        arguments:
            $security: '@security.helper'

    App\MultitenancyModule\EventListener\TenantAwareListener:
        arguments:
            $tenantContext: '@App\MultitenancyModule\Service\TenantContext'
        tags:
            - { name: doctrine.orm.entity_listener, event: prePersist }

    App\EventListener\EntityTimestampListener:
        tags:
            - { name: doctrine.orm.entity_listener, event: prePersist }
            - { name: doctrine.orm.entity_listener, event: preUpdate }
    
    App\EventListener\EntityBlameListener:
        arguments: ['@security.helper']
        tags:
            - { name: doctrine.orm.entity_listener, event: prePersist }
            - { name: doctrine.orm.entity_listener, event: preUpdate }

    App\LocalizationModule\Service\TranslationManager:
        arguments:
            $autoTranslator: '@App\\LocalizationModule\\Service\\GoogleTranslateService'

    App\LocalizationModule\Service\DatabaseTranslationLoader:
        tags:
            - { name: translation.loader, alias: db, format: db }

    # AuditTrailModule services
    App\AuditTrailModule\Service\AuditTrailService:
        arguments:
            $auditEventRepository: '@App\AuditTrailModule\Repository\AuditEventRepository'
            $tenantContext: '@App\MultitenancyModule\Service\TenantContext'
            $security: '@security.helper'
            $logger: '@monolog.logger.audit'

    # NotificationModule integration
    App\NotificationModule\Service\NotificationTrackerService:
        arguments:
            $auditTrail: '@App\AuditTrailModule\Service\AuditTrailService'

    Symfony\Component\Workflow\WorkflowInterface $notificationWorkflow: 
        '@workflow.notification'

    App\AuditTrailModule\:
        resource: '../src/AuditTrailModule/'

    App\NotificationModule\Service\DeliveryPipelineService:
        arguments:
            $logger: '@monolog.logger.notification'
            $dispatcher: '@event_dispatcher'
            $tracker: '@App\NotificationModule\Service\NotificationTrackerService'
            $renderer: '@App\NotificationModule\Service\TemplateRendererService'
            $ruleService: '@App\NotificationModule\Service\DeliveryRuleService'
            $channelRouter: '@App\NotificationModule\Service\ChannelRouterService'

    _instanceof:
        App\NotificationModule\Contract\ChannelSenderInterface:
            tags: ['notification.channel_sender']

    App\NotificationModule\Service\ChannelRouterService:
        arguments:
            $logger: '@monolog.logger.notification'

    App\NotificationModule\Service\DeliveryRuleService:
        arguments:
            $logger: '@monolog.logger.notification'
            $scheduler: '@App\NotificationModule\Service\ScheduledRuleService'
            $tenantRateLimiterFactory: '@rate_limiter.tenant_notifications'

    App\SupportModule\Contract\SupportTicketServiceInterface: '@App\SupportModule\Service\SupportTicketService'